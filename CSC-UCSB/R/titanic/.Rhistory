tapply(x,1,mean)
f[1]
attributes(f)
f$levels
f[1]
f[[1]]
ff <- gl(10,2)
tapply(x,ff,mean)
?range
tapply(x,f,mean)
mapply(x,mean)
apply(x,mean)
mapply(mean,x)
x
split(x,f)
split(x,f)[1]
split(x,f)
lapply(split(x,f),mean)
library(datasets)
head(airquality)
library(help="datasets")
s <- split(airquality,airquality$Month)
s
lapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")]))
lapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
lapply(s,function(x) colMeans(x[ c("Ozone","Solar.R","Wind")], na.rm = T))
sapply(s,function(x) colMeans(x[, c("Ozone","Solar.R","Wind")], na.rm = T))
library(lattice)
library(ggplot2)
install.packages(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2", dependencies=TRUE)
library(ggplot2)
install.packages(ggplot2,dependencies = T)
install.packages("ggplot2,dependencies = T)
install.packages("ggplot2",dependencies = T)
R.version()
R.Version()
install.packages("plyr")
install.packages("ggplot2", dependencies=TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/plyr/plyr_1.8.2.tar.gz")
install.packages("ggplot2",dep=TRUE)
install.packages("ggplot2",dep=TRUE)
R.Version()
R.Version()
library(lattice)
detach("package:lattice", unload=TRUE)
install.packages("ggplot2")
library(ggplot2)
data(mpg)
str(mpg)
qplot(displ~hwy)
qplot(displ,hwy,col=drv)
qplot(displ,hwy)
qplot(displ,hwy,data=mpg,col=drv)
R.Version()
qplot(displ,hwy,data=mpg,shape=drv)
qplot(displ,hwy,data=mpg,color=drv)
qplot(displ,hwy,data=mpg,geom=c("point","smooth"))
qplot(displ,hwy,data=mpg,color=drv,geom=c("point","smooth"))
qplot(displ,hwy,data=mpg,facets=.~drv,geom=c("point","smooth"))
g <- ggplot(displ,hwy, data=mpg)
str(mpg)
g <- ggplot(displ,hwy, data=mpg)
g <- ggplot(mpg, aes(displ,hwy))
g + geom_point()
g + geom_point()+geom_smooth()
g + geom_point()+geom_smooth(method="lm")
qplot(displ,hwy,data=mpg,geom=c("point","smooth"),method="lm")
g + geom_point()+geom_smooth(method="lm")
g + geom_point(color="steelblue",size=4,alpha=1/2)
g + geom_point(aes(color=drv)",size=4,alpha=1/2)
)
g + geom_point(aes(color=drv),size=4,alpha=1/2)
g + geom_point(aes(color=drv)+labs(title="milage"),size=4,alpha=1/2)
g + geom_point(aes(color=drv),size=4,alpha=1/2)+labs(title="milage")
g + geom_point(aes(color=drv),size=4,alpha=1/2)+labs(title="milage")+labs(x="displ")
g + geom_point(aes(color=drv),size=4,alpha=1/2)+labs(title="milage")+labs(x="displ")+theme_bw()
testdat <- data.frame(x=1:100, y=rnorm(100))
testda[50,2] <- 100 ## Outlier
testdat[50,2] <- 100 ## Outlier
plot(testdat$x,testdat$y, type="l")
g <- ggplot(testdat,aes(x,y))
g+geom_line()
g+geom_line()+coord_cartesian(ylim=c(-3,3))
?which
head(testdat)
which (testdat > 0)
tt2 <- testdat[which (testdat > 0)]
tt <- which (testdat > 0)
tt
tt <- which (testdat[,2] > 0)
tt
testdat2 <- testdat[,tt]
testdat2 <- testdat[tt]
testdat2 <- data.frame(x=testdat$x, y=testdat$y[tt])
testdat$y[tt]
install.packages("manipulate")
library(caret)
install.packages("caret",dependencies = c("Depends, Suggests"))
install.packages("caret",dependencies = c("Depends, Suggests"))
install.packages("caret",c("Depends, Suggests"))
library(caret)
library("caret")
install.packages("caret")
install.packages("caret",c("Depends, Suggests"))
install.packages("caret",dependencies = c("Suggests", "Depends"))
library(caret)
install.packages("caret",dependencies = c("Suggests", "Depends"))
install.packages('caret', dependencies = TRUE)
library(caret)
install.packages('caret', dependencies = TRUE)
install.packages('car', dependencies = TRUE)
install.packages("caret",dependencies = TRUE)
install.packages("minqa")
install.packages("caret",dependencies = TRUE)
install.packages("caret", dependencies = c("Depends", "Suggests"))
version()
R.version()
R.version
install.packages("caret")
?install.packages
install.packages("caret",dependencies = c("Depends","Suggests"),destdir = "~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages("car",dependencies = c("Depends","Suggests"),destdir = "~/R/x86_64-pc-linux-gnu-library/3.2")
install.packages('caret', repos='http://cran.rstudio.com/')
install.packages("car", contriburl = "file:///usr/repo_AO/CRAN/")
library(brglm)
install.packages("caret")
install.packages("caret")
library(caret)
.libPaths()
.libPaths()
help(Rstartup)
help(Startup)
qnorm(0.75)
pnorm(0.6745)
install.packages("swirl")
library("swirl")
install_course("The R Programming Environment")
help()
exit
q()
summary(VADeaths)
library(tidyr)
library(dplyr)
?gather
?tbl_df
VADeaths %>% tbl_df()
dt <- VADeaths %>% tbl_df()
dt
dt <- mutate(age = row.names(VADeaths))
dt <- mutate(age = row.names(dt))
VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>%
separate(key, c("urban", "gender"), sep = " ") %>%
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
dt <- VADeaths %>% tbl_df() %>% mutate(age = row.names(VADeaths))
dt
VADeaths
dt <- dt %>% gather(key, death_rate, -age)
dt
?separate
dt.didy <- VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>% # age excluded from key-value pair collapse
separate(key, c("urban", "gender"), sep = " ") %>% # separates each column into two
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
dt.tidy
dt.tidy <- VADeaths %>%
tbl_df() %>%
mutate(age = row.names(VADeaths)) %>%
gather(key, death_rate, -age) %>% # age excluded from key-value pair collapse
separate(key, c("urban", "gender"), sep = " ") %>% # separates each column into two
mutate(age = factor(age), urban = factor(urban), gender = factor(gender))
dt.tidy
install.packages("readr")
ext_tracks_file <- paste0("http://rammb.cira.colostate.edu/research/",
"tropical_cyclones/tc_extended_best_track_dataset/",
"data/ebtrk_atlc_1988_2015.txt")
library(readr)
ext_tracks_widths <- c(7, 10, 2, 2, 3, 5, 5, 6, 4, 5, 4, 4, 5, 3, 4, 3, 3, 3,
4, 3, 3, 3, 4, 3, 3, 3, 2, 6, 1)
ext_tracks_colnames <- c("storm_id", "storm_name", "month", "day",
"hour", "year", "latitude", "longitude",
"max_wind", "min_pressure", "rad_max_wind",
"eye_diameter", "pressure_1", "pressure_2",
paste("radius_34", c("ne", "se", "sw", "nw"), sep = "_"),
paste("radius_50", c("ne", "se", "sw", "nw"), sep = "_"),
paste("radius_64", c("ne", "se", "sw", "nw"), sep = "_"),
"storm_type", "distance_to_land", "final")
ex_tracks_colnames
ext_tracks_colnames
# Read the file in from its url
ext_tracks <- read_fwf(ext_tracks_file,
fwf_widths(ext_tracks_widths, ext_tracks_colnames),
na = "-99") # NA string is -99
ext_tracks[1:3, 1:9]
library(dplyr)
ext_tracks %>%
filter(storm_name == "KATRINA") %>%
select(month, day, hour, max_wind, min_pressure, rad_max_wind) %>%
sample_n(4)
library(httr)
meso_url <- "https://mesonet.agron.iastate.edu/cgi-bin/request/asos.py/"
denver <- GET(url = meso_url,
query = list(station = "DEN",
data = "sped",
year1 = "2016",
month1 = "6",
day1 = "1",
year2 = "2016",
month2 = "6",
day2 = "30",
tz = "America/Denver",
format = "comma")) %>%
content() %>%
read_csv(skip = 5, na = "M")
denver %>% slice(1:3)
denver
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x -3
y
c(1.1,9,3.14)
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
c(1,2,3,4) + c(0,10,1000)
z * 2 + 1000
my_div
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by = 0.5)
seq(5,10, length = 30)
my_seq <- seq(5,10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_sqe)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2))
rep(c(0,1,2), time = 10)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Burak")
my_name
paste(my_name, collapese = " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep="-")
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x <- c(44,NA,5,NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matric
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
TRUE == FALSE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 !=8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints < sample(10)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.remove()
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path('folder1','folder2')
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
unlink('testdir/')
unlink('testdir', recursive = TRUE)
clear
swirl()
library(foreach)
library(doMC)
registerDoMC()
nSim = 1e+5
nSpin = 100
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %dopar%
(rbinom(n = nSpin, size = 1, prob = 0.5))
library(foreach)
library(doMC)
## Parallel
registerDoMC()
# Number of simulations
nSim = 1e+3
# Number of spins for each simulation
nSpin = 100
# Parallel
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %dopar%
(rbinom(n = nSpin, size = 1, prob = 0.5))
tf <- proc.time() - t0
cat("---- Parallel coin flips ----\n")
cat("nSim, nSpin: ", nSim, nSpin, "\n")
cat("Timing:", tf[1], "\n")
cat("\n")
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %do%
(rbinom(n = nSpin, size = 1, prob = 0.5))
tf <- proc.time() - t0
cat("---- Serial coin flips ----\n")
cat("nSim, nSpin: ", nSim, nSpin, "\n")
cat("Timing:", tf[1])
library(foreach)
library(doMC)
## Parallel
registerDoMC()
# Number of simulations
nSim = 1e+4
# Number of spins for each simulation
nSpin = 100
# Parallel
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %dopar%
(rbinom(n = nSpin, size = 1, prob = 0.5))
tf <- proc.time() - t0
cat("---- Parallel coin flips ----\n")
cat("nSim, nSpin: ", nSim, nSpin, "\n")
cat("Timing:", tf[1], "\n")
cat("\n")
# Serial
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %do%
(rbinom(n = nSpin, size = 1, prob = 0.5))
tf <- proc.time() - t0
cat("---- Serial coin flips ----\n")
cat("nSim, nSpin: ", nSim, nSpin, "\n")
cat("Timing:", tf[1])
library(foreach)
library(doMC)
## Parallel
registerDoMC()
# Number of simulations
nSim = 1e+5
# Number of spins for each simulation
nSpin = 100
# Parallel
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %dopar%
(rbinom(n = nSpin, size = 1, prob = 0.5))
tf <- proc.time() - t0
cat("---- Parallel coin flips ----\n")
cat("nSim, nSpin: ", nSim, nSpin, "\n")
cat("Timing:", tf[1], "\n")
cat("\n")
# Serial
coinFlips <- matrix(0, nrow = nSim, ncol = nSpin)
t0 <- proc.time() # Start clock
coinFlips <- foreach(i=1:nSim, .combine = rbind) %do%
(rbinom(n = nSpin, size = 1, prob = 0.5))
tf <- proc.time() - t0
cat("---- Serial coin flips ----\n")
cat("nSim, nSpin: ", nSim, nSpin, "\n")
cat("Timing:", tf[1])
library(readr)
library(dplyr)
library(Matrix)
library(glmnet)
library(foreach)
library(doMC)
## Parallel
registerDoMC()
train <- read_csv("./data/train.csv", col_types = 'iiiccdiicdcc')
test <- read_csv("./data/test.csv", col_types = 'iiccdiicdcc')
setwd("~/Works/Repos/talks-and-lectures/CSC-UCSB/R/")
dir()
setwd("./titanic/")
dir()
train <- read_csv("./data/train.csv", col_types = 'iiiccdiicdcc')
test <- read_csv("./data/test.csv", col_types = 'iiccdiicdcc')
train %>% filter(Sex == "Male")
train
train %>% filter(Sex == "male")
train %>% filter(Sex == "male") %>% summary(surv_rat = n()/dim(train)[1])
train %>% filter(Sex == "male") %>% summarize(surv_rat = n()/dim(train)[1])
train %>% group_by(Sex) %>% summarize(survivalRate = n()/(dim(train)[1]) )
train %>% group_by(Sex) %>% summarize(survivalRate = n(Survived == True)/n() )
train %>% group_by(Sex, Survived) %>% summarize(survivalRate = n() )
train %>% group_by(Sex) %>% summarize(survivalRate = sum(Survived == TRUE) )
train %>% group_by(Sex) %>% summarize(survivalRate = sum(Survived == TRUE)/n() )
train %>% group_by(Sex) %>% summarize(survivalRate = sum(Survived == TRUE)/n() )
